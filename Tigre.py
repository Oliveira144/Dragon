import streamlit as st
import collections

# --- Configura√ß√£o da p√°gina ---
st.set_page_config(
    page_title="Analisador de Padr√µes Dragon Tiger",
    page_icon="üêâüêØ",
    layout="wide"
)

# --- Vari√°veis de Mapeamento ---
mapear_emojis = {'D': 'üêâ', 'T': 'üêØ', 'E': 'üü°'}

# --- Fun√ß√µes de An√°lise de Padr√µes ---
def analisar_padrao_dragon_tiger(historico):
    """
    Analisa o hist√≥rico do Dragon Tiger e retorna o padr√£o detectado e a sugest√£o de aposta.
    Prioriza a detec√ß√£o de padr√µes de Empate e dos 8 padr√µes principais.
    """
    if len(historico) < 2:
        return "Nenhum Padr√£o Detectado", "Aguardando...", "Insira mais resultados para iniciar a an√°lise."

    # Invertemos o hist√≥rico para analisar do mais recente para o mais antigo
    hist_recente = list(historico)[::-1]

    # --- AN√ÅLISE PRIORIT√ÅRIA DE EMPATES (üü°) ---
    # 6. Padr√£o Tie √Çncora (Empate inserido para quebrar a leitura)
    # Aposta: Alta probabilidade de repetir o lado anterior.
    if len(hist_recente) >= 2 and hist_recente[0] == 'E' and hist_recente[1] in ['D', 'T']:
        lado_anterior = mapear_emojis[hist_recente[1]]
        sugestao_completa = f"**Padr√£o Tie √Çncora.** Um empate foi usado para resetar a leitura. A IA geralmente for√ßa a repeti√ß√£o do lado anterior para confundir. Prepare-se para um novo ciclo."
        return "Tie √Çncora", f"Aposte em {lado_anterior} (Repeti√ß√£o do lado anterior)", sugestao_completa

    # 9. Padr√£o √Çncora com Delay (Empate no meio de altern√¢ncias)
    # Aposta: Repeti√ß√£o do lado anterior √© comum.
    if len(hist_recente) >= 3 and hist_recente[1] == 'E' and hist_recente[0] != hist_recente[2]:
        lado_anterior = mapear_emojis[hist_recente[2]]
        sugestao_completa = f"**Padr√£o √Çncora com Delay.** Um empate no meio de altern√¢ncias. A IA continua a altern√¢ncia. A sugest√£o √© seguir a altern√¢ncia, mas com cautela, pois o empate pode ter quebrado a leitura."
        return "√Çncora com Delay", f"Aposte em {lado_anterior} (Seguir altern√¢ncia)", sugestao_completa
        
    # --- AN√ÅLISE DOS PADR√ïES PRINCIPAIS E SUBPADR√ïES ---
    # Garante que n√£o h√° empates nas √∫ltimas 5 jogadas para evitar conflito com a l√≥gica acima
    if 'E' not in hist_recente[:5]:
        # 1. Padr√£o Altern√¢ncia (Zig-Zag)
        count_alternancia = 0
        for i in range(min(len(hist_recente) - 1, 6)): # Limita a 6 para evitar falsos positivos
            if hist_recente[i] != hist_recente[i+1]:
                count_alternancia += 1
            else:
                break
        if count_alternancia >= 3:
            sugestao_completa = f"**Padr√£o Altern√¢ncia (Zig-Zag)** com {count_alternancia + 1} sequ√™ncias. A IA est√° preparando uma quebra. Sugest√£o: Prepare-se para apostar na repeti√ß√£o do lado vencedor da √∫ltima rodada."
            return "Altern√¢ncia (Zig-Zag)", f"Prepare-se para a quebra. Aposte em {mapear_emojis[hist_recente[0]]}", sugestao_completa

        # 2. Padr√£o Streak (Sequ√™ncia Longa)
        count_streak = 0
        for i in range(min(len(hist_recente), 8)): # Limita a 8 repeti√ß√µes
            if hist_recente[i] == hist_recente[0]:
                count_streak += 1
            else:
                break
        if count_streak >= 4:
            sugestao_completa = f"**Padr√£o Streak** com {count_streak} vit√≥rias consecutivas. A IA cria confian√ßa falsa. A quebra pode ocorrer a qualquer momento. Sugest√£o: Aposte na continuidade com cautela ou espere a quebra para inverter."
            return "Streak (Sequ√™ncia Longa)", f"Aposte em {mapear_emojis[hist_recente[0]]} (com cautela)", sugestao_completa

        # 3. Padr√£o Espelhado (Mirror)
        # Ex: D-D-T-T-T-T-D-D
        if len(hist_recente) >= 4 and hist_recente[0:2] == hist_recente[2:4][::-1] and hist_recente[0] != hist_recente[2]:
            sugestao_completa = "**Padr√£o Espelhado.** A IA inverte a sequ√™ncia para confundir sua leitura. Sugest√£o: Aposte contra a repeti√ß√£o exata do espelho."
            return "Espelhado (Mirror)", f"Aposte em {mapear_emojis[hist_recente[1]]} (Contra o espelho)", sugestao_completa

        # 4. Padr√£o Gradual (Escada)
        if len(hist_recente) >= 6:
            # Ex: D-T-T-D-D-D-T-T-T-T
            # Verifica se a sequ√™ncia recente mostra um lado crescendo
            bloco_1 = hist_recente[0]
            bloco_2 = hist_recente[3]
            bloco_3 = hist_recente[6]
            if hist_recente[0:2].count(bloco_1) >= 2 and hist_recente[2:5].count(bloco_2) >= 3 and hist_recente[5:].count(bloco_3) >= 4:
                sugestao_completa = f"**Padr√£o Gradual (Escada).** A IA est√° simulando naturalidade. A aposta mais segura √© no lado que est√° crescendo. Prepare a quebra ap√≥s 4 vit√≥rias seguidas."
                return "Gradual (Escada)", f"Aposte em {mapear_emojis[hist_recente[0]]} at√© 4 vit√≥rias", sugestao_completa
        
        # 5. Padr√£o Cluster (Blocos Curtos)
        if len(hist_recente) >= 6:
            # Ex: (D-D-T) (T-T-D) (D-D-T)
            bloco_1 = tuple(hist_recente[0:3])
            bloco_2 = tuple(hist_recente[3:6])
            if bloco_1 == bloco_2:
                sugestao_completa = f"**Padr√£o Cluster.** A IA cria uma sensa√ß√£o de pseudoaleatoriedade. Sugest√£o: Aposte na repeti√ß√£o do bloco, mas prepare-se para inverter ap√≥s o terceiro bloco."
                return "Cluster (Blocos Curtos)", f"Aposte em {mapear_emojis[bloco_1[0]]} (Repeti√ß√£o do bloco)", sugestao_completa
        
        # 7. Padr√£o Falso Ciclo
        if len(hist_recente) >= 4 and hist_recente[0] == hist_recente[2] and hist_recente[1] == hist_recente[3] and hist_recente[0] != hist_recente[1]:
            sugestao_completa = f"**Padr√£o Falso Ciclo.** A IA est√° simulando um ciclo previs√≠vel para quebrar no final. Sugest√£o: Aposte na quebra do ciclo."
            return "Falso Ciclo", f"Aposte na quebra. Sugest√£o: Aposte em {mapear_emojis[hist_recente[0]]}", sugestao_completa

    # --- PADR√ÉO PADR√ÉO CAMUFLADO (PSEUDO-RANDOM) ---
    # √â o padr√£o "catch-all" quando nada mais se encaixa
    sugestao_completa = "**Padr√£o Camuflado (Pseudo-Random).** A IA est√° misturando padr√µes para criar uma ilus√£o de caos total. Sugest√£o: Use a contagem estat√≠stica (contagem dos √∫ltimos 10) para apostar no lado que est√° levemente atr√°s."
    contagem = collections.Counter(historico)
    if 'D' in contagem and 'T' in contagem:
        lado_atras = 'D' if contagem['D'] < contagem['T'] else 'T'
        sugestao_direta = f"Aposte no lado que est√° levemente atr√°s: {mapear_emojis[lado_atras]}"
    else:
        sugestao_direta = "Cautela! N√£o aposte pesado"
    return "Camuflado (Pseudo-Random)", sugestao_direta, sugestao_completa

# --- Inicializa√ß√£o do estado da sess√£o ---
if 'historico' not in st.session_state:
    st.session_state.historico = collections.deque(maxlen=20) # Limita a 20 resultados

# --- Layout do aplicativo ---
st.title("üêâüêØ Analisador de Padr√µes Dragon Tiger")
st.markdown("---")

st.markdown("### 1. Inserir Resultados")
st.write("Clique nos bot√µes correspondentes ao resultado do jogo. 'Dragon' e 'Tiger' s√£o os 'Lados'.")

col1, col2, col3, col4, col5 = st.columns(5)
with col1:
    if st.button("üêâ Dragon", use_container_width=True):
        st.session_state.historico.append('D')
with col2:
    if st.button("üêØ Tiger", use_container_width=True):
        st.session_state.historico.append('T')
with col3:
    if st.button("üü° Empate", use_container_width=True):
        st.session_state.historico.append('E')
with col4:
    st.markdown("<br>", unsafe_allow_html=True)
    if st.button("Desfazer", help="Remove o √∫ltimo resultado inserido", use_container_width=True):
        if st.session_state.historico:
            st.session_state.historico.pop()
with col5:
    st.markdown("<br>", unsafe_allow_html=True)
    if st.button("Limpar Hist√≥rico", help="Apaga todos os resultados", type="primary", use_container_width=True):
        st.session_state.historico.clear()

st.markdown("---")

st.markdown("### 2. Hist√≥rico de Resultados")
# A LINHA ABAIXO FOI ALTERADA PARA EXIBIR OS EMOJIS
historico_str = " ".join([mapear_emojis[r] for r in reversed(st.session_state.historico)])
st.markdown(f"**Mais Recente ‚Üí Mais Antigo:** {historico_str}")

st.markdown("---")

st.markdown("### 3. An√°lise e Sugest√£o")
if st.session_state.historico:
    padrao, sugestao_direta, sugestao_completa = analisar_padrao_dragon_tiger(list(st.session_state.historico))
    st.markdown(f"**Padr√£o Detectado:** `{padrao}`")
    st.success(f"**{sugestao_direta}**")
    st.info(f"**Explica√ß√£o:** {sugestao_completa}")
else:
    st.info("O hist√≥rico est√° vazio. Insira resultados para come√ßar a an√°lise.")

# Agradecimento
st.markdown("<br><br><br>", unsafe_allow_html=True)
st.markdown("---")
st.write("Desenvolvido para an√°lise de padr√µes de Dragon Tiger com Streamlit. **Lembre-se:** jogue com responsabilidade.")

